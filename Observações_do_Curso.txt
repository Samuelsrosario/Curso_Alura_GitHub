==>> 01. Compartilhando projetos:
=> Apresentação.
=> Conhecendo o GitHub:
- Podemos compartilhar o projeto e também somente o código.
=> Criando um repositório:
- Repositório: É o local onde vou guardar as informações/ documentos daquele projeto.
- O nome do repositório, no momento da criação, ele deve ser único na minha conta, isso significa que não consigo ter dois repositórios na minha conta com o mesmo nome.
- O campo descrição, o seu preenchimento é opcional.
- O campo de visbilidade (publico/privado) deve ser preenchido, nele a gente informa se aquele repositório vai ter visibilidade de quem tiver o link ou somente eu terei o acesso a ele.
=> Instalando o Git:
- O link entre o projeto que está no computador com a conta do GitHub, se dá atraves de comandos, o Vs code tem um terminal integrado, indo em "terminal/novoterminal".
	- Ao clicar no novo terminal, abri-se um prompt de comandos, é nesse local onde estarei colocando os comandos a serem executados.
	- Quando eu crio um repositório, logo ele mostra alguns comandos os quais devo executar se tenho ou não o repositório na minha máquina.
	- Antes, temos que instalar o GIT.
	- Após instalar o GIT, devemos configurar as "variáveis de ambiente/path" do windows, da´coloco o caminho do Git.
	- utilizando dentro da pasta do projeto, no vs code, no novo terminal, o comando "git init" iniciara o repositório do GIT no Vs Code.
		- O comando git init deve ser utilizado para converter um diretório existente no computador, que geralmente é o diretório de algum projeto, em um repositório Git.
			- Esse comando deve ser utilizado somente uma vez, pois ele transforma o diretório do projeto em um repositório GIT. Quando executado, ele configura o diretório atual para ser rastreado pelo Git, inicializando um repositório vazio. Ele deve ser executado dentro do diretório do projeto e não em outros diretórios do computador.
* GitHub: Plataforma onde hospedamos o código.
* GIT: Ferramenta onde fazemos o controle de versões do código.
=> Sicronizando repositórios
- utilizando o código "git add ." assim ele vai adicionar todos os arquivos no repositório.
- Depois utilizamos o comando "git commit -m" e podemos colocar uma mensagem, desde que ela esteja dentro de aspas duplas.
	- tenho que fazer o login e senha do GitHub, depois do email devo colocar o meu nome.
- Depois utilizo o comando "git branch -M main"
- Logo após utilizo o comando "git remote add origin https://..." depois de rodar esse comando, estaremos conectando o repositório local com o repositório do GitHub.
	- Clicando lá no "Quick setup" é importante que utilizemos o SSH.
	- Lembrando que esse comando ele só faz o link entre o repositório local e o da nuvem.
- Utilizando o comando "git push -u origin main" esse sim envia os doc para a nuvem.
	- Ao tentar fazer o processo é importante gerar a chave SSH.
		- Para geração da chave, no GitHUb vamos em configuração, depois "SSH and gpg KEYS"
		- No próprio site do GitHub ele ensina a como gerar uma nova chave SSH.






































































==>> Aula 2: Colaborando em projetos:

- Clonando um repositório:
	- Em Code, no GitHub, conseguimos ter várias opções de download dos arquivos.
		- Para download de todo o repositório, copio o URL que ele me dá em "code", vou até onde quero cópiar o repositório, abro do prompt de comando, depois coloco o código "git clone {link}" + enter. Daí ele faz o download completo do repositório.


- Realizando um commit:
	- Um commit guarda o estado do projeto naquele momento.
	-  Se eu alterar algum arquivo, ou vários arquivos, e não me lembrar quais foram alterados, posso utilizar, pelo terminal do vs code, o comando "git status" o qual vai me mostrar quais os arquivos foram modificados.
	- No terminal do vscode, utilizando do comando "git add ." eu adiciono todos os arquvios de um projeto no repositório local.
	- Utilizando o comando "git commit" eu registro todas as mudanças no repositório.
		- Se eu utilizar o comando "git commit -m"{mensagem}"" eu consigo colocar uma mensagem com a descrição do que foi alterado, por exemplo.
	- Utilizando do comando "git log" o terminal ira listar o histórico de commits de um repositório.
	- O controle de mudanças do Git é feito através dos commits. Cada commit armazena o estado completo do projeto em um determinado momento por meio de um snapshot. Ou seja, cada commit é um registro completo do repositório no momento em que esse commit foi criado.


- Enviando commits: 
	- Utilizando o comando "git remote" eu listo os repositórios remotos.
	- Utilizando do comando "git push", eu envio os commits do repositório local para o repositório remoto do GitHub.
	- Adicionando colaboradores ao projeto:
		- Tenho que está no Github, dentro do projeto, aí vou em configurações do repositório, clico na opção de colaboradores e depois adiciono as pessoas. Após adicionar a pessoa precisa aceitar o convite.


- Baixando novos commits:
	- utilizando o comando "git pull origin main" para baixar os commits do repositório remoto para o repositório local.

***********************************************Resumo da Aula*****************************************************************************
Nessa aula, você aprendeu como:
Baixar uma cópia de um repositório hospedado no GitHub para o seu computador, utilizando o comando git clone;
Realizar alterações no código de um projeto e registrá-las com commits, utilizando os comandos git add e git commit;
Visualizar quais arquivos foram modificados no repositório local, utilizando o comando git status;
Listar os commits realizados no repositório, com dados do autor, data e mensagem de cada commit, utilizando o comando git log;
Visualizar os repositórios remotos linkados com o repositório local, utilizando o comando git remote;
Enviar commits feitos no repositório local para o repositório remoto, utilizando o comando git push;
Baixar commits do repositório remoto para o repositório local, utilizando o comando git pull;
Adicionar uma pessoa como colaboradora em um repositório no GitHub, e também como aceitar um convite de colaboração recebido.
******************************************************************************************************************************************


==>> Aula 3: Utilizando Git na IDE:
- Git no VSCode:
	- Com o vs code aberto, ao lado esquerdo, tem um ícone "Soucer Control" ou (Ctrl+Shift+G). Por essa interfase conseguimos fazer qualquer comando como upload ou download do git.
		- Tem alguns icones (Changes) nessa interfase, o simbolo de "+" significa que vou adicionar essas alterações no próximo commit(Staged Changes).
- Simulando um conflito:
	- Se duas pessoas ou mais, fizerem alterações na mesma linha e ambos forem fazer o commit, o git dará uma msg de erro pois não sabe qual será relevante em consideração ao outro.
- Resolvendo conflito:
	- Nesse caso pelo vscode ele nos mostra as linhas conflitantes e nós manualmente podemos escolher a que prevalecerá em relação a outra.
	- Após resolver o conflito, deve ser feito um novo commit.
	- Podemos tbm utilizar uma ferramenta "Merge Editor"
		- Para solucionarmos o problema, clicamos na opção “Resolve in Merge Editor”
		- Após o clique, somos redirecionados para outra aba que apresenta as modificações no arquivo.
		- Incoming (remoto): modificações que chegam do repositório remoto. Current (local): modificações locais. Result (resultado): resultado do merge, ou seja, a resolução dos conflitos de mesclagem. É o estado atual do arquivo. (Os quadrados na cor amarela em volta do código no campo “Incoming” e “Current” são marcadores de conflito: exibem o conteúdo que apresenta conflito no arquivo.)
			- Após selecionarmos a opção com o resultado desejado, devemos: Salvar o arquivo, Clicar no botão “complete Merge”, Realizar o commit das modificações, Sincronizar as modificações para realizar o push.	
***********************************************************Resumo da Aula***************************************************************
Nessa aula, você aprendeu como:
Utilizar o Git pela integração do VSCode, ao invés de utilizar pelo terminal;
Entender como acontecem conflitos de códigos em commits que modificam um mesmo arquivo, feitos por pessoas distintas;
O Git sinaliza no código um conflito, via marcações visuais;
Resolver um conflito manualmente, editando o arquivo e realizando um commit que marca o conflito como resolvido.
*****************************************************************************************************************************************
==>> Aula 4: Voltando no tempo:
	



































	
